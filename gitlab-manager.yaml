---
AWSTemplateFormatVersion: 2010-09-09
Description: Creates gitlab-manager environment.

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentAlertStack
    - Label:
        default: 'Gitlab'
      Parameters: 
      - GitlabUrl
      - GitlabToken
    - Label:
        default: 'Cache'
      Parameters: 
      - CacheBucketName
      - CacheExpirationInDays
    - Label:
        default: 'Gitlab manager'
      Parameters:
      - ManagerInstanceType
      - GitlabCheckInterval
    - Label:
        default: 'Gitlab runners'
      Parameters:
      - GitlabRunnerInstanceType
      - GitlabDockerImage
      - GitlabMaxBuilds
      - GitlabMaxConcurrentBuilds
      - GitlabIdleCount
      - GitlabIdleTime
      - GitlabTimezone
      - GitlabOffPeakIdleCount
      - GitlabOffPeakIdleTime
      - GitLabRunnerSpotInstance
      - GitLabRunnerSpotInstancePrice
      - RunnersLimit

Parameters:
  ParentVPCStack:
    Description: Stack name containing VPC from https://github.com/widdix/aws-cf-templates/tree/master/vpc
    Type: String

  ParentAlertStack:
    Description: Optional stack name containing SNS topic from https://github.com/widdix/aws-cf-templates/blob/master/operations/alert.yaml
    Type: String
    Default: ''

  CacheBucketName:
    Description: Name of the S3 bucket to be created to store runners cache. Leave empty to autogenerate a name.
    Type: String
    Default: ''

  CacheExpirationInDays:
    Description: Number of days after which a cache item is expired. Set to 0 to disable expiration.
    Type: Number
    MinValue: 0
    Default: 7 

  ManagerInstanceType:
    Description: Instance type for GitLab Runners' manager.
    Type: String
    Default: 't2.micro'

  GitlabUrl:
    Description: GitLab instance URL.
    Type: String
    Default: https://gitlab.com/

  GitlabToken:
    Description: GitLab Runner registration token.
    Type: String
    NoEcho: true

  GitlabRunnerInstanceType:
    Description: Instance type for GitLab Runners.
    Type: String
    Default: 't2.micro'

  GitlabDockerImage:
    Description: Name of the Docker image to be used.
    Type: String
    Default: 'alpine:latest'

  GitlabMaxBuilds:
    Description: Maximum number of builds before the runner is terminated.
    Type: Number
    MinValue: 1
    Default: 100

  GitlabMaxConcurrentBuilds:
    Description: Maximum number of concurrent builds during working hours.  
    Type: Number
    MinValue: 1
    Default: 10

  GitlabIdleCount:
    Description: Number of idle hosts during working hours.
    Type: Number
    MinValue: 0
    Default: 0

  GitlabIdleTime:
    Description: Number of seconds of inactivity before an idle host is shut down during working hours.
    Type: Number
    MinValue: 1
    Default: 1800

  GitlabTimezone:
    Description: Timezone for Gitlab workers.
    Type: String
    Default: 'Etc/UTC'

  GitlabOffPeakIdleCount:
    Description: Number of idle hosts during non-working hours.
    Type: Number
    MinValue: 0
    Default: 0

  GitlabOffPeakIdleTime:
    Description: Number of seconds of inactivity before an idle host is shut down during non-working hours.
    Type: Number
    MinValue: 1
    Default: 1200

  GitlabCheckInterval:
    Description: Number of seconds how often the Gitlab manager should check GitLab for new jobs.
    Type: Number
    MinValue: 3
    Default: 10

  GitLabRunnerSpotInstance:
    Description: Will runners be spot instances?
    Type: String
    AllowedValues: ['Yes', 'No']
    Default: 'No'

  GitLabRunnerSpotInstancePrice:
    Description: Spot instance bid price.
    Type: Number
    MinValue: 0
    Default: 0.08

  RunnersLimit:
    Description: Sets the maximum number of machines (running and idle) that this runner will spawn.
    Type: Number
    Default: 3

  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain log events.
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  AllowECRAccess:
    Description: Enable this if your gitlab runners will upload built images to ECR.
    Type: String
    AllowedValues: ['Yes', 'No']
    Default: 'No'

Mappings:
  Manager:
    'eu-north-1':
      AmiId: 'ami-08bdc08970fcbd34a'
    'ap-south-1':
      AmiId: 'ami-079b5e5b3971bd10d'
    'eu-west-3':
      AmiId: 'ami-021d41cbdefc0c994'
    'eu-west-2':
      AmiId: 'ami-0d729d2846a86a9e7'
    'eu-west-1':
      AmiId: 'ami-0c1bc246476a5572b'
    'ap-northeast-3':
      AmiId: 'ami-0ca3b0faa0c4c4bbd'
    'ap-northeast-2':
      AmiId: 'ami-0cbec04a61be382d9'
    'ap-northeast-1':
      AmiId: 'ami-02c3627b04781eada'
    'sa-east-1':
      AmiId: 'ami-0800f9916b7655289'
    'ca-central-1':
      AmiId: 'ami-0843f7c45354d48b5'
    'ap-southeast-1':
      AmiId: 'ami-0bd6906508e74f692'
    'ap-southeast-2':
      AmiId: 'ami-0c6120f461d6b39e9'
    'eu-central-1':
      AmiId: 'ami-09439f09c55136ecf'
    'us-east-1':
      AmiId: 'ami-0022f774911c1d690'
    'us-east-2':
      AmiId: 'ami-0fa49cc9dc8d62c84'
    'us-west-1':
      AmiId: 'ami-02541b8af977f6cdd'
    'us-west-2':
      AmiId: 'ami-0ca285d4c2cda3300'

Conditions:
  GivenBucketName: !Not [!Equals ['', !Ref 'CacheBucketName']]
  ExpireCacheObjects: !Not [!Equals [0, !Ref 'CacheExpirationInDays']]
  UseSpotInstances: !Equals ['Yes', !Ref 'GitLabRunnerSpotInstance']
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  ECRAccessAllowed: !Equals [!Ref AllowECRAccess, 'Yes']

Resources:
  CacheBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If
        - 'GivenBucketName'
        - !Ref 'CacheBucketName'
        - !Ref 'AWS::NoValue'
      LifecycleConfiguration: !If
        - 'ExpireCacheObjects'
        - Rules:
            - Status: 'Enabled'
              ExpirationInDays: !Ref 'CacheExpirationInDays'
        - !Ref 'AWS::NoValue'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ManagerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'} 
      GroupName: !Sub '${AWS::StackName}-ManagerSecurityGroup'
      GroupDescription: 'Security group for GitLab Runners Manager.'
      SecurityGroupIngress:
        - Description: 'Gitlab session server traffic'
          IpProtocol: 'tcp'
          FromPort: 8093
          ToPort: 8093
          CidrIp: '34.74.90.64/28'
        - Description: 'Gitlab session server traffic'
          IpProtocol: 'tcp'
          FromPort: 8093
          ToPort: 8093
          CidrIp: '34.74.226.0/28'

  ManagerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: GitlabManagerEc2 
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'ec2:AssociateAddress'
              Resource:
              - '*'
              Condition:
                StringEquals:
                  'aws:ResourceTag/Name': 'Gitlab runner manager instance'
        - PolicyName: Cache
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:ListObjects*'
                  - 's3:GetObject*'
                  - 's3:DeleteObject*'
                  - 's3:PutObject*'
                Resource:
                  - !Sub '${CacheBucket.Arn}/*'
              - Effect: 'Allow'
                Action:
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt 'CacheBucket.Arn'
        - PolicyName: Runners
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateKeyPair'
                  - 'ec2:ImportKeyPair'
                  - 'ec2:DeleteKeyPair'
                  - 'ec2:DescribeKeyPairs'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeInstances'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateTags'
                  - 'ssm:UpdateInstanceInformation'
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    'ec2:Region': !Ref 'AWS::Region'
                  StringLike:
                    'aws:RequestTag/Name': '*gitlab-*'
                  ForAllValues:StringEquals:
                    'aws:TagKeys': ['Name']
              - Effect: 'Allow'
                Action:
                  - 'ec2:RunInstances'
                  - 'ec2:RequestSpotInstances'
                Resource:
                  - '*'
                Condition:
                  StringEqualsIfExists:
                    'ec2:InstanceType': !Ref 'GitlabRunnerInstanceType'
                    'ec2:Region': !Ref 'AWS::Region'
                    'ec2:Tenancy': 'default'
                  ArnEqualsIfExists:
                    'ec2:Vpc': !Sub
                      - 'arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}'
                      - VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
                    'ec2:InstanceProfile': !GetAtt 'RunnersInstanceProfile.Arn'
              - Effect: 'Allow'
                Action:
                  - 'ec2:TerminateInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:StartInstances'
                  - 'ec2:RebootInstances'
                Resource:
                  - '*'
                Condition:
                  StringLike:
                    'ec2:ResourceTag/Name': '*gitlab-*'
                  ArnEquals:
                    'ec2:InstanceProfile': !GetAtt 'RunnersInstanceProfile.Arn'
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !GetAtt 'RunnersRole.Arn'

  ManagerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref 'ManagerRole'

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          gitlab:
            - 'gitlab-repo'
            - 'gitlab-packages'
            - 'gitlab-config'
            - 'gitlab-register'
          system:
            - 'system'
          default:
            - ConfigSet: 'system'
            - ConfigSet: 'gitlab'
        gitlab-repo:
          commands:
            '10-add-gitlab-repo':
              command: 'curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | bash'
        gitlab-packages:
          packages:
            yum:
              'docker': []
              'gitlab-runner': []
              'tzdata': []
          commands:
            10-docker-machine:
              command: 'curl -L https://gitlab-docker-machine-downloads.s3.amazonaws.com/main/docker-machine-`uname -s`-`uname -m` > /tmp/docker-machine && install /tmp/docker-machine /usr/bin/docker-machine'
        gitlab-config:
          files:
            '/etc/gitlab-runner/config.toml':
              owner: 'gitlab-runner'
              group: 'gitlab-runner'
              mode: '000600'
              content: !Sub |
                concurrent = ${GitlabMaxConcurrentBuilds}
                check_interval = ${GitlabCheckInterval}
                [session_server]
                  listen_address = "[::]:8093" #  listen on all available interfaces on port 8093
                  advertise_address = "${ManagerEIP}:8093"
                  session_timeout = 1800
            '/etc/gitlab-runner/config.template':
              owner: 'gitlab-runner'
              group: 'gitlab-runner'
              mode: '000600'
              content:
                Fn::Sub:
                  - |
                    [[runners]]
                      limit = ${RunnersLimit}
                      environment = ["DOCKER_TLS_CERTDIR=/certs"]
                      [runners.docker]
                        tls_verify = false
                        image = "${GitlabDockerImage}"
                        privileged = true
                        disable_cache = true
                        volumes = ["/certs/client", "/cache"]
                        shm_size = 0
                      [runners.cache]
                        Type = "s3"
                        Shared = true
                      [runners.cache.s3]
                        ServerAddress = "s3.${AWS::URLSuffix}"
                        BucketName = "${CacheBucket}"
                        BucketLocation = "${AWS::Region}"
                      [runners.machine]
                        MachineName = "gitlab-%s"
                        MachineDriver = "amazonec2"
                        IdleCount = ${GitlabIdleCount}
                        IdleTime = ${GitlabIdleTime}
                        MaxBuilds = ${GitlabMaxBuilds}
                        MachineOptions = [
                          "engine-storage-driver=overlay2",
                          "amazonec2-instance-type=${GitlabRunnerInstanceType}",
                          "amazonec2-region=${AWS::Region}",
                          "amazonec2-vpc-id=${VpcId}",
                          "amazonec2-security-group=${AWS::StackName}-RunnersSecurityGroup",
                          "amazonec2-use-private-address=true",
                          "amazonec2-iam-instance-profile=${RunnersInstanceProfile}", ${LocalSpotVar}
                        ]
                        [[runners.machine.autoscaling]]
                          Periods = ["* * 11-20 * * mon-fri *"]
                          IdleCount = ${GitlabIdleCount} 
                          IdleTime = ${GitlabIdleTime}
                          Timezone = "${GitlabTimezone}"
                        [[runners.machine.autoscaling]]
                          Periods = ["* * * * * sat,sun *"]
                          IdleCount = ${GitlabOffPeakIdleCount}
                          IdleTime = ${GitlabOffPeakIdleTime}
                          Timezone = "${GitlabTimezone}"
                    [session_server]
                      listen_address = "[::]:8093" #  listen on all available interfaces on port 8093
                      advertise_address = "${ManagerEIP}:8093"
                      session_timeout = 1800
                  - LocalSpotVar: !If ['UseSpotInstances', !Sub ', "amazonec2-request-spot-instance=true", "amazonec2-spot-price=${GitLabRunnerSpotInstancePrice}"', '']
                    VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
            '/etc/rsyslog.d/25-gitlab-runner.conf':
              owner: 'root'
              group: 'root'
              mode: '000644'
              content: |
                :programname, isequal, "gitlab-runner" /var/log/gitlab-runner.log
          services:
            systemd:
              gitlab-runner:
                enabled: "true"
                ensureRunning: "true"
        gitlab-register:
          commands:
            10-gitlab-runner-restart:
              command: 'gitlab-runner restart'
            20-gitlab-runner-register:
              command: !Sub 'gitlab-runner register --non-interactive --url ${GitlabUrl} --registration-token ${GitlabToken} --executor docker+machine --docker-image alpine:latest --name ${AWS::StackName} --template-config /etc/gitlab-runner/config.template'
        system:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 30,
                        "totalcpu": false
                      },
                      "disk": {
                        "measurement": [
                          "used_percent",
                          "inodes_free"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      },
                      "statsd": {
                        "metrics_aggregation_interval": 30,
                        "metrics_collection_interval": 10,
                        "service_address": ":8125"
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      }
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "log_group_name": "/var/log/boot.log",
                            "log_stream_name": "{instance_id}",
                            "file_path": "/var/log/boot.log"
                          },
                          {
                            "log_group_name": "/var/log/messages",
                            "log_stream_name": "{instance_id}",
                            "file_path": "/var/log/messages"
                          },
                          {
                            "log_group_name": "/var/log/cloud-init.log",
                            "log_stream_name": "{instance_id}",
                            "file_path": "/var/log/cloud-init.log"
                          },
                          {
                            "log_group_name": "/var/log/cloud-init-output.log",
                            "log_stream_name": "{instance_id}",
                            "file_path": "/var/log/cloud-init-output.log"
                          }
                        ]
                      }
                    }
                  }
                }
            '/etc/cfn/cfn-hup.conf':
              owner: 'root'
              group: 'root'
              mode: '000400'
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Manager.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Manager --configsets default
                runas=root
          services:
            systemd:
              amazon-cloudwatch-agent:
                enabled: "true"
                ensureRunning: "true"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref ManagerInstanceProfile
        ImageId: !FindInMap ['Manager', !Ref 'AWS::Region', 'AmiId'] 
        InstanceType: !Ref ManagerInstanceType
        NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          Groups:
          - !Ref ManagerSecurityGroup
        UserData:
          Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            TOKEN=$(curl --silent --max-time 60 -X PUT http://169.254.169.254/latest/api/token -H "X-aws-ec2-metadata-token-ttl-seconds: 30")
            INSTANCEID=$(curl --silent --max-time 60 -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
            aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIPAllocationId}
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} --configsets default
            /opt/aws/bin/cfn-signal -e $? --stack '${AWS::StackName}' --region '${AWS::Region}' --resource ManagerAutoscalingGroup
          - EIPAllocationId: !GetAtt 'ManagerEIP.AllocationId'

  ManagerAutoscalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt 'LaunchTemplate.LatestVersionNumber'
      MaxSize: '1'
      MinSize: '1'
      Tags:
      - Key: Name
        Value: 'Gitlab runner manager instance'
        PropagateAtLaunch: true
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      - []
      VPCZoneIdentifier:
      - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPublic'}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT1H
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true

  ManagerEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'
      Tags:
      - Key: Name
        Value: 'Gitlab runner manager instance'

  RunnersRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: GitlabRunners
      ManagedPolicyArns:
        - Fn::If:
          - ECRAccessAllowed
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  RunnersInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref 'RunnersRole'

  RunnersSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'} 
      GroupName: !Sub '${AWS::StackName}-RunnersSecurityGroup'
      GroupDescription: 'Security group for GitLab Runners.'
      SecurityGroupIngress:
        - Description: 'SSH traffic from Manager'
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref 'ManagerSecurityGroup'
        - Description: 'Docker traffic from Manager'
          IpProtocol: 'tcp'
          FromPort: 2376
          ToPort: 2376
          SourceSecurityGroupId: !Ref 'ManagerSecurityGroup'

  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

Outputs:
  CacheBucketName:
    Description: Name of created S3 bucket.
    Value: !Ref 'CacheBucket'
  ManagerIP:
    Description: IP of manager instance.
    Value: !Ref 'ManagerEIP'
  RunnersRole:
    Description: Role of gitlab runners.
    Value: !Ref 'RunnersRole'
  RunnersRoleARN:
    Description: ARN for gitlab runners role.
    Value: !GetAtt 'RunnersRole.Arn'
  ManagerRole:
    Description: Role of gitlab-mamager.
    Value: !Ref 'ManagerRole'
  ManagerRoleARN:
    Description: ARN for gitlab-manager role.
    Value: !GetAtt 'ManagerRole.Arn'